import { useState, useEffect } from 'react'; import { Eye, EyeOff, ChevronRight, ArrowRight, Smartphone, Lock, Mail, Globe, AlertCircle, Fingerprint, Bell, Shield, Activity, User, Trending, Key, Sliders, Zap, Coffee, HelpCircle } from 'lucide-react';

export default function UltraModernLogin() { const [activeTab, setActiveTab] = useState('email'); const [email, setEmail] = useState(''); const [password, setPassword] = useState(''); const [phone, setPhone] = useState(''); const [showPassword, setShowPassword] = useState(false); const [countryCode, setCountryCode] = useState('+1'); const [rememberMe, setRememberMe] = useState(false); const [isLoading, setIsLoading] = useState(false); const [mounted, setMounted] = useState(false); const [showSecurityTips, setShowSecurityTips] = useState(false); const [loginMethod, setLoginMethod] = useState('normal'); const [theme, setTheme] = useState('light'); const [showFeaturePanel, setShowFeaturePanel] = useState(false);

useEffect(() => { setMounted(true); return () => setMounted(false); }, []);

const handleSubmit = (e) => { e.preventDefault(); setIsLoading(true);

// Simulate API call setTimeout(() => { setIsLoading(false); console.log('Login attempted with:', activeTab === 'email' ? { email, password } : { phone, password }); }, 1500); 

};

const toggleTheme = () => { setTheme(theme === 'light' ? 'dark' : 'light'); };

const themeClasses = theme === 'dark' ? 'bg-gray-900 text-white' : 'bg-gradient-to-br from-gray-50 to-gray-100';

const inputBgClasses = theme === 'dark' ? 'bg-gray-800 border-gray-700 focus:border-blue-500' : 'bg-gray-50 border-transparent focus:border-orange-500';

const primaryColor = theme === 'dark' ? 'blue' : 'orange'; const primaryColorClasses = theme === 'dark' ? 'bg-blue-600 hover:bg-blue-700 focus:ring-blue-500' : 'bg-orange-500 hover:bg-orange-600 focus:ring-orange-500';

return ( <div className={flex flex-col min-h-screen font-sans transition-all duration-500 w-full ${themeClasses}}> 

{/* Login container /} 

{/ Feature toggles */} 

<button onClick={toggleTheme} className={p-2 rounded-full ${theme === 'dark' ? 'bg-gray-800 text-blue-400' : 'bg-gray-100 text-gray-600'}} > {theme === 'dark' ? : } <button onClick={() => setShowFeaturePanel(!showFeaturePanel)} className={p-2 rounded-full ${theme === 'dark' ? 'bg-gray-800 text-blue-400' : 'bg-gray-100 text-gray-600'}} > 

{/* Feature panel */} {showFeaturePanel && ( <div className={`absolute right-4 top-16 z-10 p-4 rounded-lg shadow-xl border ${theme === 'dark' ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} w-64`}> <h3 className="font-medium mb-2 flex items-center"> <Zap className="w-4 h-4 mr-2" /> Features </h3> <div className="space-y-2"> <div className="flex items-center justify-between"> <span className="text-sm">Save login info</span> <div className="relative inline-block w-10 align-middle select-none"> <input type="checkbox" className="absolute opacity-0 w-0 h-0" /> <div className={`block w-10 h-6 rounded-full cursor-pointer ${theme === 'dark' ? 'bg-gray-700' : 'bg-gray-200'}`}></div> <div className="absolute left-1 top-1 bg-white w-4 h-4 rounded-full transition-transform"></div> </div> </div> <div className="flex items-center justify-between"> <span className="text-sm">Biometric login</span> <div className="relative inline-block w-10 align-middle select-none"> <input type="checkbox" className="absolute opacity-0 w-0 h-0" /> <div className={`block w-10 h-6 rounded-full cursor-pointer ${theme === 'dark' ? 'bg-gray-700' : 'bg-gray-200'}`}></div> <div className="absolute left-1 top-1 bg-white w-4 h-4 rounded-full transition-transform"></div> </div> </div> <div className="flex items-center justify-between"> <span className="text-sm">2FA</span> <div className="relative inline-block w-10 align-middle select-none"> <input type="checkbox" checked className="absolute opacity-0 w-0 h-0" /> <div className={`block w-10 h-6 rounded-full cursor-pointer ${theme === 'dark' ? 'bg-blue-700' : 'bg-orange-500'}`}></div> <div className="absolute left-5 top-1 bg-white w-4 h-4 rounded-full transition-transform"></div> </div> </div> </div> </div> )} <div className="flex justify-between items-center mb-6"> {loginMethod === 'normal' ? ( <div> <h1 className={`text-3xl font-bold mb-1 ${theme === 'dark' ? 'text-white' : 'text-gray-800'}`}>Welcome back</h1> <p className={`${theme === 'dark' ? 'text-gray-400' : 'text-gray-500'} text-sm`}>Sign in to continue</p> </div> ) : ( <div> <h1 className={`text-2xl font-bold mb-1 ${theme === 'dark' ? 'text-white' : 'text-gray-800'}`}>Quick Sign In</h1> <p className={`${theme === 'dark' ? 'text-gray-400' : 'text-gray-500'} text-sm`}>Use your saved credentials</p> </div> )} <div className="flex space-x-2"> <button onClick={() => setLoginMethod('normal')} className={`text-sm px-3 py-1 rounded ${loginMethod === 'normal' ? theme === 'dark' ? 'bg-blue-600 text-white' : 'bg-orange-500 text-white' : theme === 'dark' ? 'bg-gray-800 text-gray-300' : 'bg-gray-200 text-gray-700' }`} > Standard </button> <button onClick={() => setLoginMethod('quick')} className={`text-sm px-3 py-1 rounded ${loginMethod === 'quick' ? theme === 'dark' ? 'bg-blue-600 text-white' : 'bg-orange-500 text-white' : theme === 'dark' ? 'bg-gray-800 text-gray-300' : 'bg-gray-200 text-gray-700' }`} > Quick </button> </div> </div> {loginMethod === 'normal' ? ( <> {/* Login tabs */} <div className={`flex w-full mt-2 border-b ${theme === 'dark' ? 'border-gray-700' : ''}`}> <button onClick={() => setActiveTab('email')} className={`pb-2 px-3 text-sm font-medium transition-all relative ${ activeTab === 'email' ? theme === 'dark' ? 'text-blue-500' : 'text-orange-500' : theme === 'dark' ? 'text-gray-400 hover:text-gray-200' : 'text-gray-500 hover:text-gray-700' }`} > Email {activeTab === 'email' && ( <span className={`absolute bottom-0 left-0 w-full h-0.5 rounded-t-full ${theme === 'dark' ? 'bg-blue-500' : 'bg-orange-500'}`}></span> )} </button> <button onClick={() => setActiveTab('phone')} className={`pb-2 px-3 text-sm font-medium transition-all relative ${ activeTab === 'phone' ? theme === 'dark' ? 'text-blue-500' : 'text-orange-500' : theme === 'dark' ? 'text-gray-400 hover:text-gray-200' : 'text-gray-500 hover:text-gray-700' }`} > Phone {activeTab === 'phone' && ( <span className={`absolute bottom-0 left-0 w-full h-0.5 rounded-t-full ${theme === 'dark' ? 'bg-blue-500' : 'bg-orange-500'}`}></span> )} </button> </div> {/* Login Form Fields */} <form onSubmit={handleSubmit} className="py-6 w-full"> <div className={`transition-all duration-300 ${activeTab === 'email' ? 'opacity-100 max-h-24' : 'opacity-0 max-h-0 overflow-hidden absolute'}`}> <div className="mb-4"> <div className="relative group"> <Mail className={`absolute left-3 top-3 h-5 w-5 ${theme === 'dark' ? 'text-gray-500 group-focus-within:text-blue-400' : 'text-gray-400 group-focus-within:text-orange-500'} transition-colors`} /> <input type="email" value={email} onChange={(e) => setEmail(e.target.value)} placeholder="Email address" className={`w-full pl-10 pr-3 py-3 rounded-lg text-sm focus:outline-none focus:ring-2 ${ theme === 'dark' ? 'bg-gray-800 focus:ring-blue-500 focus:bg-gray-700 border border-gray-700 focus:border-blue-500 text-white' : 'bg-gray-50 focus:ring-orange-500 focus:bg-white border border-transparent focus:border-orange-500' } transition-all`} required /> </div> </div> </div> <div className={`transition-all duration-300 ${activeTab === 'phone' ? 'opacity-100 max-h-24' : 'opacity-0 max-h-0 overflow-hidden absolute'}`}> <div className="mb-4"> <div className="relative flex group"> <div className={`flex items-center rounded-l-lg px-3 border-r ${ theme === 'dark' ? 'bg-gray-800 border-gray-700 group-focus-within:bg-gray-700' : 'bg-gray-50 border-gray-200 group-focus-within:bg-white' } transition-colors`}> <select value={countryCode} onChange={(e) => setCountryCode(e.target.value)} className={`bg-transparent text-sm focus:outline-none py-3 ${ theme === 'dark' ? 'text-gray-300' : 'text-gray-600' }`} > <option value="+1">+1</option> <option value="+44">+44</option> <option value="+86">+86</option> <option value="+91">+91</option> </select> </div> <div className="relative flex-1"> <Smartphone className={`absolute left-3 top-3 h-5 w-5 ${ theme === 'dark' ? 'text-gray-500 group-focus-within:text-blue-400' : 'text-gray-400 group-focus-within:text-orange-500' } transition-colors`} /> <input type="tel" value={phone} onChange={(e) => setPhone(e.target.value)} placeholder="Phone number" className={`w-full pl-10 pr-3 py-3 rounded-r-lg text-sm focus:outline-none focus:ring-2 ${ theme === 'dark' ? 'bg-gray-800 focus:ring-blue-500 focus:bg-gray-700 border border-gray-700 focus:border-blue-500 text-white' : 'bg-gray-50 focus:ring-orange-500 focus:bg-white border border-transparent focus:border-orange-500' } transition-all`} required /> </div> </div> </div> </div> <div className="mb-4 mt-4"> <div className="relative group"> <Lock className={`absolute left-3 top-3 h-5 w-5 ${ theme === 'dark' ? 'text-gray-500 group-focus-within:text-blue-400' : 'text-gray-400 group-focus-within:text-orange-500' } transition-colors`} /> <input type={showPassword ? "text" : "password"} value={password} onChange={(e) => setPassword(e.target.value)} placeholder="Password" className={`w-full pl-10 pr-10 py-3 rounded-lg text-sm focus:outline-none focus:ring-2 ${ theme === 'dark' ? 'bg-gray-800 focus:ring-blue-500 focus:bg-gray-700 border border-gray-700 focus:border-blue-500 text-white' : 'bg-gray-50 focus:ring-orange-500 focus:bg-white border border-transparent focus:border-orange-500' } transition-all`} required /> <button type="button" onClick={() => setShowPassword(!showPassword)} className={`absolute right-3 top-3 ${ theme === 'dark' ? 'text-gray-400 hover:text-gray-200' : 'text-gray-400 hover:text-gray-600' } transition-colors`} > {showPassword ? <EyeOff className="h-5 w-5" /> : <Eye className="h-5 w-5" />} </button> </div> </div> <div className="flex items-center justify-between mb-6"> <div className="flex items-center"> <div className="relative inline-block w-10 mr-2 align-middle select-none"> <input id="remember-me" type="checkbox" checked={rememberMe} onChange={() => setRememberMe(!rememberMe)} className="absolute opacity-0 w-0 h-0" /> <div className={`block w-10 h-6 rounded-full cursor-pointer ${ theme === 'dark' ? 'bg-gray-700' : 'bg-gray-200' }`}></div> <div className={`absolute left-1 top-1 bg-white w-4 h-4 rounded-full transition-transform duration-300 ease-in-out ${ rememberMe ? `transform translate-x-4 ${theme === 'dark' ? 'bg-blue-500' : 'bg-orange-500'}` : '' }`}></div> </div> <label htmlFor="remember-me" className={`block text-sm cursor-pointer ${ theme === 'dark' ? 'text-gray-300' : 'text-gray-600' }`}> Remember me </label> </div> <div className="text-sm"> <a className={`font-medium cursor-pointer ${ theme === 'dark' ? 'text-blue-400 hover:text-blue-300' : 'text-orange-500 hover:text-orange-600' } transition-colors`}> Forgot password? </a> </div> </div> <button type="submit" disabled={isLoading} className={`w-full flex items-center justify-center font-medium py-3 px-4 rounded-lg transition-all relative overflow-hidden ${primaryColorClasses} focus:outline-none focus:ring-2 focus:ring-offset-2`} > <span className={`flex items-center transition-all duration-300 ${isLoading ? 'opacity-0' : 'opacity-100'}`}> Sign in <ArrowRight className="ml-2 h-4 w-4" /> </span> {isLoading && ( <span className="absolute inset-0 flex items-center justify-center"> <svg className="animate-spin h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"> <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle> <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path> </svg> </span> )} </button> </form> </> ) : ( // Quick login UI <div className="py-4 space-y-4"> <div className={`p-4 rounded-lg flex items-center justify-between ${ theme === 'dark' ? 'bg-gray-800' : 'bg-white shadow-sm border border-gray-100' }`}> <div className="flex items-center"> <div className={`p-2 rounded-full mr-3 ${ theme === 'dark' ? 'bg-gray-700' : 'bg-gray-100' }`}> <User className={`h-5 w-5 ${ theme === 'dark' ? 'text-blue-400' : 'text-orange-500' }`} /> </div> <div> <p className={`font-medium ${theme === 'dark' ? 'text-white' : 'text-gray-800'}`}>user@example.com</p> <p className={`text-xs ${theme === 'dark' ? 'text-gray-400' : 'text-gray-500'}`}>Last login: Today, 2:45 PM</p> </div> </div> <button className={`px-4 py-2 rounded-lg text-sm font-medium ${primaryColorClasses} text-white`}> Login </button> </div> <div className={`p-4 rounded-lg flex items-center justify-between ${ theme === 'dark' ? 'bg-gray-800' : 'bg-white shadow-sm border border-gray-100' }`}> <div className="flex items-center"> <div className={`p-2 rounded-full mr-3 ${ theme === 'dark' ? 'bg-gray-700' : 'bg-gray-100' }`}> <User className={`h-5 w-5 ${ theme === 'dark' ? 'text-blue-400' : 'text-orange-500' }`} /> </div> <div> <p className={`font-medium ${theme === 'dark' ? 'text-white' : 'text-gray-800'}`}>business@example.com</p> <p className={`text-xs ${theme === 'dark' ? 'text-gray-400' : 'text-gray-500'}`}>Last login: Yesterday</p> </div> </div> <button className={`px-4 py-2 rounded-lg text-sm font-medium ${ theme === 'dark' ? 'bg-gray-700 hover:bg-gray-600 text-gray-200' : 'bg-gray-100 hover:bg-gray-200 text-gray-700' }`}> Login </button> </div> <button className={`w-full flex items-center justify-center py-2 px-4 rounded-lg text-sm ${ theme === 'dark' ? 'bg-gray-800 text-gray-300 hover:bg-gray-700' : 'bg-gray-100 text-gray-700 hover:bg-gray-200' }`}> <Key className="h-4 w-4 mr-2" /> Use a different account </button> </div> )} {/* Social logins */} <div className="pt-0 pb-6 w-full"> <div className="relative flex items-center justify-center my-4"> <div className={`border-t w-full absolute ${theme === 'dark' ? 'border-gray-700' : ''}`}></div> <span className={`px-4 text-sm relative ${ theme === 'dark' ? 'bg-gray-900 text-gray-400' : 'bg-gradient-to-br from-gray-50 to-gray-100 text-gray-500' }`}>or continue with</span> </div> <div className="grid grid-cols-3 gap-3"> <button className={`flex justify-center items-center py-2 px-4 rounded-lg shadow-sm transition-all hover:shadow-md ${ theme === 'dark' ? 'bg-gray-800 hover:bg-gray-700 border-gray-700' : 'bg-white hover:bg-gray-50 border border-gray-300' }`}> <svg className="h-5 w-5" viewBox="0 0 24 24" fill="none"> <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" fill="#4285F4" /> <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" fill="#34A853" /> <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" fill="#FBBC05" /> <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" fill="#EA4335" /> </svg> </button> <button className={`flex justify-center items-center py-2 px-4 rounded-lg shadow-sm transition-all hover:shadow-md ${ theme === 'dark' ? 'bg-gray-800 hover:bg-gray-700 border-gray-700' : 'bg-white hover:bg-gray-50 border border-gray-300' }`}> <svg className="h-5 w-5" viewBox="0 0 24 24" fill="#1877F2"> <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z" /> </svg> </button> <button className={`flex justify-center items-center py-2 px-4 rounded-lg shadow-sm transition-all hover:shadow-md ${ theme === 'dark' ? 'bg-gray-800 hover:bg-gray-700 border-gray-700' : 'bg-white hover:bg-gray-50 border border-gray-300' }`}> <svg className="h-5 w-5" viewBox="0 0 24 24" fill={theme === 'dark' ? 'white' : 'black'}> <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z" /> </svg> </button> </div> </div> {/* Registration link and security toggle */} <div className={`py-4 flex items-center justify-between w-full ${ theme === 'dark' ? 'bg-gray-800' : 'bg-gray-50' }`}> <div className="flex items-center"> <p className={`text-sm ${theme === 'dark' ? 'text-gray-300' : 'text-gray-600'}`}>Don't have an account?</p> <a className={`ml-2 inline-flex items-center text-sm font-medium cursor-pointer group ${ theme === 'dark' ? 'text-blue-400 hover:text-blue-300' : 'text-orange-500 hover:text-orange-600' } transition-colors`}> Register now <ChevronRight className="ml-1 h-4 w-4 transition-transform group-hover:translate-x-1" /> </a> </div> <button onClick={() => setShowSecurityTips(!showSecurityTips)} className={`flex items-center text-sm ${ theme === 'dark' ? 'text-blue-400 hover:text-blue-300' : 'text-orange-500 hover:text-orange-600' }`} > <Shield className="h-4 w-4 mr-1" /> Security tips </button> </div> {/* Security tips */} {showSecurityTips && ( <div className 

Continue this code