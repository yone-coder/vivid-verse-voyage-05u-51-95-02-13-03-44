
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wkfzhcszhgewkvwukzes.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndrZnpoY3N6aGdld2t2d3VremVzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg3MDE1NzksImV4cCI6MjA1NDI3NzU3OX0.TzSh8M9NOTnsmVaNxquif4xzSxWaVZp9sePHcjrgCVI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Function to fetch all products from the database
export const fetchAllProducts = async () => {
  const { data, error } = await supabase
    .from('products')
    .select(`
      *,
      product_images (*)
    `)
    .order('created_at', { ascending: false });
  
  if (error) {
    console.error('Error fetching products:', error);
    throw error;
  }
  
  return data || [];
};

// Function to fetch a single product by ID
export const fetchProductById = async (productId: string) => {
  const { data, error } = await supabase
    .from('products')
    .select(`
      *,
      product_images (*)
    `)
    .eq('id', productId)
    .maybeSingle();
  
  if (error) {
    console.error(`Error fetching product with ID ${productId}:`, error);
    throw error;
  }
  
  return data;
};

// Function to update a product
export const updateProduct = async (productId: string, updates: any) => {
  // Check if the update would actually change anything
  const { data: existingProduct, error: fetchError } = await supabase
    .from('products')
    .select('*')
    .eq('id', productId)
    .maybeSingle();
    
  if (fetchError) {
    console.error(`Error fetching existing product with ID ${productId}:`, fetchError);
    throw fetchError;
  }
  
  // Check if the name field is being updated and if it's the same as the current name
  if (updates.name && existingProduct && updates.name === existingProduct.name) {
    console.log('No changes detected - name is the same as existing');
    return { noChanges: true };
  }
  
  const { data, error } = await supabase
    .from('products')
    .update(updates)
    .eq('id', productId)
    .select();
  
  if (error) {
    console.error(`Error updating product with ID ${productId}:`, error);
    throw error;
  }
  
  return data;
};

// Function to subscribe to product changes
export const subscribeToProductChanges = (callback: (payload: any) => void) => {
  const channel = supabase
    .channel('product-changes')
    .on(
      'postgres_changes',
      {
        event: '*',
        schema: 'public',
        table: 'products'
      },
      callback
    )
    .subscribe();
  
  return channel;
};
