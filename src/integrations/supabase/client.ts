
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wkfzhcszhgewkvwukzes.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndrZnpoY3N6aGdld2t2d3VremVzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzg3MDE1NzksImV4cCI6MjA1NDI3NzU3OX0.TzSh8M9NOTnsmVaNxquif4xzSxWaVZp9sePHcjrgCVI";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Fetch all products from the database
export const fetchAllProducts = async () => {
  console.log('Fetching all products from database');
  const { data, error } = await supabase
    .from('products')
    .select('*, product_images(*)');
  
  if (error) {
    console.error('Error fetching products:', error);
    throw error;
  }
  
  return data || [];
};

// Fetch a specific product by ID
export const fetchProductById = async (productId: string) => {
  console.log(`Fetching product with ID: ${productId}`);
  const { data, error } = await supabase
    .from('products')
    .select('*, product_images(*)')
    .eq('id', productId)
    .single();
  
  if (error) {
    console.error(`Error fetching product ${productId}:`, error);
    throw error;
  }
  
  return data;
};

// Create a new product
export const createProduct = async (productData) => {
  const { data, error } = await supabase
    .from('products')
    .insert(productData)
    .select();
  
  if (error) {
    console.error('Error creating product:', error);
    throw error;
  }
  
  return data;
};

// Update an existing product
export const updateProduct = async (productId, updates) => {
  const { data, error } = await supabase
    .from('products')
    .update(updates)
    .eq('id', productId)
    .select();
  
  if (error) {
    console.error(`Error updating product ${productId}:`, error);
    throw error;
  }
  
  return data;
};

// Subscribe to product changes
export const subscribeToProductChanges = (callback) => {
  const subscription = supabase
    .channel('products-channel')
    .on('postgres_changes', 
      { event: '*', schema: 'public', table: 'products' }, 
      (payload) => {
        callback(payload);
      }
    )
    .subscribe();
  
  return subscription;
};
