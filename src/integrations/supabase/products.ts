
// This file is automatically generated. Do not edit it directly.
import { supabase } from './client';

export interface Product {
  id: string;
  name: string;
  description: string;
  price: number;
  discount_price: number | null;
  created_at?: string;
  updated_at?: string;
  product_images?: ProductImage[];
  user_id?: string;
  inventory?: number;
  sales?: number;
}

export interface ProductImage {
  id: string;
  product_id: string;
  src: string;
  alt: string;
  created_at?: string;
  updated_at?: string;
}

// Fetch all products with their images
export const fetchAllProducts = async (): Promise<Product[]> => {
  try {
    const { data, error } = await supabase
      .from('products')
      .select(`
        *,
        product_images(*)
      `);
    
    if (error) {
      console.error('Error fetching products:', error);
      return [];
    }
    
    return data || [];
  } catch (error) {
    console.error('Error in fetchAllProducts:', error);
    return [];
  }
};

// Fetch a single product by ID with its images
export const fetchProductById = async (id: string): Promise<Product | null> => {
  try {
    const { data, error } = await supabase
      .from('products')
      .select(`
        *,
        product_images(*)
      `)
      .eq('id', id)
      .single();
    
    if (error) {
      console.error('Error fetching product:', error);
      return null;
    }
    
    return data;
  } catch (error) {
    console.error(`Error in fetchProductById for id ${id}:`, error);
    return null;
  }
};

// Fetch products by user ID
export const fetchUserProducts = async (userId: string): Promise<Product[]> => {
  try {
    const { data, error } = await supabase
      .from('products')
      .select(`
        *,
        product_images(*)
      `)
      .eq('user_id', userId);
    
    if (error) {
      console.error('Error fetching user products:', error);
      return [];
    }
    
    return data || [];
  } catch (error) {
    console.error(`Error in fetchUserProducts for user ${userId}:`, error);
    return [];
  }
};

// Create a new product
export const createProduct = async (product: {
  name: string;
  description: string;
  price: number;
  discount_price?: number | null;
  user_id?: string;
  inventory?: number;
}): Promise<Product | null> => {
  try {
    const { data, error } = await supabase
      .from('products')
      .insert(product)
      .select()
      .single();
    
    if (error) {
      console.error('Error creating product:', error);
      return null;
    }
    
    return data;
  } catch (error) {
    console.error('Error in createProduct:', error);
    return null;
  }
};

// Update a product
export const updateProduct = async (
  id: string, 
  updates: Partial<Omit<Product, 'id' | 'created_at' | 'updated_at'>>
): Promise<Product | null> => {
  try {
    const { data, error } = await supabase
      .from('products')
      .update(updates)
      .eq('id', id)
      .select();
    
    if (error) {
      console.error(`Error updating product with id ${id}:`, error);
      return null;
    }
    
    return data?.[0] || null;
  } catch (error) {
    console.error(`Error in updateProduct for id ${id}:`, error);
    return null;
  }
};

// Subscribe to product changes using realtime
export const subscribeToProductChanges = (callback: () => void) => {
  const channel = supabase
    .channel('products-changes')
    .on(
      'postgres_changes',
      {
        event: '*',
        schema: 'public',
        table: 'products'
      },
      () => {
        callback();
      }
    )
    .subscribe();

  // Return a cleanup function
  return () => {
    supabase.removeChannel(channel);
  };
};
